#!/bin/bash

# This script automates and monitors a rolling update for a Kubernetes deployment.
#
# It performs the following steps:
# 1. Sets up a port-forward to the service to allow for external testing.
# 2. Runs a continuous 'curl' loop in the background to check for any downtime during the update.
# 3. Applies the updated deployment YAML file to trigger the rolling update.
# 4. Monitors the progress of the rollout until it's complete.
# 5. Verifies the final state by listing the pods and checking the deployment's image version.
# 6. Cleans up all background processes upon completion or exit.

# --- Configuration ---
DEPLOYMENT_NAME="messaging-app-blue"
SERVICE_NAME="messaging-app-service"
LOCAL_PORT=8080
SERVICE_PORT=80

# --- Cleanup Function ---
# This function ensures that the background curl and port-forward processes are stopped
# when the script exits, either normally or through an interruption.
cleanup() {
    echo "INFO: Cleaning up background processes..."
    if [ -n "$CURL_PID" ]; then
        kill $CURL_PID 2>/dev/null
        echo "INFO: Stopped curl process (PID: $CURL_PID)."
    fi
    if [ -n "$PORT_FORWARD_PID" ]; then
        kill $PORT_FORWARD_PID 2>/dev/null
        echo "INFO: Stopped port-forward process (PID: $PORT_FORWARD_PID)."
    fi
}

# Trap the EXIT signal to guarantee the cleanup function is called.
trap cleanup EXIT

# --- Step 1: Start Port Forwarding ---
echo "INFO: Setting up port-forward to service/${SERVICE_NAME} on localhost:${LOCAL_PORT}..."
kubectl port-forward service/${SERVICE_NAME} ${LOCAL_PORT}:${SERVICE_PORT} &
PORT_FORWARD_PID=$!
# Allow a few seconds for the port-forwarding connection to be established.
sleep 3

# --- Step 2: Start Continuous Health Check with curl ---
echo "INFO: Starting continuous curl requests to check for downtime. Expect HTTP 200 responses."
(
    # This loop runs in a subshell in the background.
    while true; do
        # -s for silent, -o /dev/null to discard body, -w to write out the HTTP status code.
        status_code=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:${LOCAL_PORT})
        echo "Timestamp: $(date +%T) | Service Status: ${status_code}"
        sleep 1
    done
) &
CURL_PID=$!

# --- Step 3: Apply the Updated Deployment ---
echo "INFO: Applying the updated blue_deployment.yaml to trigger a rolling update..."
kubectl apply -f blue_deployment.yaml
if [ $? -ne 0 ]; then
    echo "ERROR: Failed to apply the deployment update. Aborting."
    exit 1
fi

# --- Step 4: Monitor the Rolling Update ---
echo "INFO: Monitoring the rollout status of deployment/${DEPLOYMENT_NAME}..."
kubectl rollout status deployment/${DEPLOYMENT_NAME} --watch
if [ $? -ne 0 ]; then
    echo "ERROR: The rolling update failed. Check the pod logs for more details."
    exit 1
fi
echo "SUCCESS: Rolling update completed successfully."

# --- Step 5: Verify the Final State ---
echo "INFO: Verifying the pods after the update..."
kubectl get pods -l app=messaging-app,version=blue

echo "INFO: Describing the deployment to confirm the new image version..."
# Grep for the 'Image:' line in the deployment description to confirm the update.
kubectl describe deployment ${DEPLOYMENT_NAME} | grep "Image:"

echo "--- Script Finished ---"
