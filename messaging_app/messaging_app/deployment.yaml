# This YAML file defines the Kubernetes resources needed to deploy the Django messaging app.
# It includes a Deployment to manage the application pods and a Service to expose them.
#
# To apply this configuration:
# kubectl apply -f deployment.yaml
#
# To verify the deployment:
# kubectl get deployments
# kubectl get pods
#
# To check the logs of a specific pod:
# kubectl logs <your-pod-name>

apiVersion: apps/v1
kind: Deployment
metadata:
  # The name of the deployment
  name: messaging-app-deployment
  labels:
    app: messaging-app
spec:
  # The number of pod replicas to run
  replicas: 1
  selector:
    # This selector identifies the pods managed by this deployment
    matchLabels:
      app: messaging-app
  template:
    metadata:
      # Labels applied to each pod created by this template
      labels:
        app: messaging-app
    spec:
      containers:
      - name: messaging-app-container
        # IMPORTANT: Replace this with the actual name of your Docker image.
        # For example: 'mydockerhubusername/messaging-app:latest'
        image: my-dockerhub-username/messaging-app:latest
        ports:
        # The port your Django application listens on inside the container
        - containerPort: 8000

---

apiVersion: v1
kind: Service
metadata:
  # The name of the service
  name: messaging-app-service
spec:
  # The type of service. ClusterIP exposes the service on an internal IP in the cluster.
  type: ClusterIP
  selector:
    # This selector directs traffic to pods with the 'app: messaging-app' label
    app: messaging-app
  ports:
  - protocol: TCP
    # The port the service will be available on within the cluster
    port: 80
    # The port on the pod to forward traffic to (must match containerPort)
    targetPort: 8000
